export = BitswapAPI;
declare class BitswapAPI {
    /**
     * @param {Object} config
     * @param {NetworkService} config.network
     */
    constructor({ network }: {
        network: import("../../utils/service")<import("../network").Options, import("../network")>;
    });
    wantlist: (options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("cids")[]>;
    wantlistForPeer: (peerId: string | import("cids") | Uint8Array | import("peer-id"), options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("cids")[]>;
    unwant: (cids: import("cids") | import("cids")[], options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<void>;
    stat: (options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("./stat").BitswapStats>;
}
declare namespace BitswapAPI {
    export { NetworkService, PeerId, CID, AbortOptions };
}
type NetworkService = import("../../utils/service")<import("../network").Options, import("../network")>;
type PeerId = import("peer-id");
type CID = import("cids");
type AbortOptions = import("ipfs-core-types").AbortOptions;
//# sourceMappingURL=index.d.ts.map