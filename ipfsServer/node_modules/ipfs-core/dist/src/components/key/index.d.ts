export = KeyAPI;
declare class KeyAPI {
    /**
     * @param {Object} config
     * @param {Keychain} config.keychain
     */
    constructor({ keychain }: {
        keychain: Keychain;
    });
    gen: (name: string, options?: (import("./gen").GenOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<Key>;
    list: () => Promise<import("libp2p/src/keychain").KeyInfo[]>;
    rm: (name: string) => Promise<import("./rm").RemovedKey>;
    rename: (oldName: string, newName: string) => Promise<import("./rename").RenamedKey>;
    export: (name: string, password: string) => Promise<string>;
    import: (name: string, pem: string, password: string) => Promise<Key>;
    info: (name: string) => Promise<Key>;
}
declare namespace KeyAPI {
    export { Keychain, AbortOptions, Key };
}
type Key = {
    name: string;
    id: string;
};
type Keychain = import("libp2p/src/keychain");
type AbortOptions = import("ipfs-core-types").AbortOptions;
//# sourceMappingURL=index.d.ts.map