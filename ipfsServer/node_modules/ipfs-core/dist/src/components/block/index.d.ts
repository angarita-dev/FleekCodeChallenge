export = BlockAPI;
declare class BlockAPI {
    /**
     * @param {Object} config
     * @param {Preload} config.preload
     * @param {BlockService} config.blockService
     * @param {GCLock} config.gcLock
     * @param {Pin} config.pin
     * @param {PinManager} config.pinManager
     */
    constructor({ blockService, preload, gcLock, pinManager, pin }: {
        preload: Preload;
        blockService: BlockService;
        gcLock: GCLock;
        pin: Pin;
        pinManager: PinManager;
    });
    get: (cid: string | import("cids") | Uint8Array, options?: (import("./get").GetOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("ipfs-core-types/src/block-service").Block>;
    put: (block: Uint8Array | import("ipfs-core-types/src/block-service").Block, options?: (import("./put").PutOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("ipfs-core-types/src/block-service").Block>;
    rm: (cids: import("cids") | import("cids")[], options?: (import("./rm").RmOptions & import("ipfs-core-types").AbortOptions) | undefined) => AsyncIterable<import("./rm").RmSucceess | import("./rm").RmFailure>;
    stat: (cid: import("cids"), options?: (import("./stat").StatOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("./stat").Stat>;
}
declare namespace BlockAPI {
    export { Preload, BlockService, GCLock, Pin, PinManager, AbortOptions, CID, IPLDBlock };
}
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
    start(): void;
    stop(): void;
};
type BlockService = import("ipfs-core-types/src/block-service").BlockService;
type GCLock = {
    readLock: () => Promise<() => void>;
    writeLock: () => Promise<() => void>;
};
type Pin = import("../pin");
type PinManager = import("../pin/pin-manager");
type AbortOptions = import("ipfs-core-types").AbortOptions;
type CID = import("cids");
type IPLDBlock = import("ipfs-core-types/src/block-service").Block;
//# sourceMappingURL=index.d.ts.map