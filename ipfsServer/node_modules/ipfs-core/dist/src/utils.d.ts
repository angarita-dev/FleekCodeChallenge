export var mergeOptions: {
    <T, U>(target: T, source: U): T & U;
    <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;
    <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;
    (target: object, ...sources: any[]): any;
};
export var OFFLINE_ERROR: string;
export var MFS_ROOT_KEY: any;
export var MFS_MAX_CHUNK_SIZE: number;
export var MFS_MAX_LINKS: number;
/**
 * Returns a well-formed ipfs Path.
 * The returned path will always be prefixed with /ipfs/ or /ipns/.
 *
 * @param  {string} pathStr - An ipfs-path, or ipns-path or a cid
 * @returns {string} - ipfs-path or ipns-path
 * @throws on an invalid @param pathStr
 */
export function normalizePath(pathStr: string): string;
/**
 * @param {Uint8Array|CID|string} path
 * @returns {string}
 */
export function normalizeCidPath(path: Uint8Array | import("cids") | string): string;
/**
 * Resolve various styles of an ipfs-path to the hash of the target node.
 * Follows links in the path.
 *
 * Accepts formats:
 * - <base58 string>
 * - <base58 string>/link/to/venus
 * - /ipfs/<base58 string>/link/to/pluto
 * - multihash Buffer
 *
 * @param {import('./components').DagReader} dag
 * @param {CID | string} ipfsPath - A CID or IPFS path
 * @param {Object} [options] - Optional options passed directly to dag.resolve
 * @returns {Promise<CID>}
 */
export function resolvePath(dag: import('./components').DagReader, ipfsPath: import("cids") | string, options?: any): Promise<import("cids")>;
/**
 * @typedef {import('ipfs-core-types/src/files').InputFile} InputFile
 * @typedef {import('ipfs-core-types/src/files').UnixFSFile} UnixFSFile
 * @typedef {import('ipfs-core-types/src/files').IPFSEntry} IPFSEntry
 * @typedef {import('ipfs-core-types/src').AbortOptions} AbortOptions
 *
 * @param {InputFile|UnixFSFile} file
 * @param {Object} [options]
 * @param {boolean} [options.includeContent]
 * @returns {IPFSEntry}
 */
export function mapFile(file: InputFile | UnixFSFile, options?: {
    includeContent?: boolean | undefined;
} | undefined): IPFSEntry;
export var withTimeoutOption: typeof import("ipfs-core-utils/src/with-timeout-option");
export function withTimeout<T>(promise: T | Promise<T>, _options?: import("ipfs-core-types").AbortOptions | undefined): Promise<T>;
export type InputFile = import("ipfs-core-types/src/files").InputFile;
export type UnixFSFile = import("ipfs-core-types/src/files").UnixFSFile;
export type IPFSEntry = import("ipfs-core-types/src/files").File | import("ipfs-core-types/src/files").Directory;
export type AbortOptions = import("ipfs-core-types").AbortOptions;
//# sourceMappingURL=utils.d.ts.map